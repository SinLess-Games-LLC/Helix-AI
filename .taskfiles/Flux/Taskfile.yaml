---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
  PROMETHEUS_OPERATOR_VERSION: v0.71.2
  CLUSTER_SECRET_SOPS_FILE: '{{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml'
  CLUSTER_SETTINGS_FILE: '{{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml'
  GITHUB_DEPLOY_KEY_FILE: '{{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml'

tasks:
  bootstrap:
    desc: "Bootstrap Flux into a Kubernetes cluster, applying CRDs and initial configurations."
    cmds:
      - |
        kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side \
          --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
      - |
        kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side \
          --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
      - |
        kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side \
          --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_scrapeconfigs.yaml
      - |
        kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side \
          --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
      - kubectl -n kube-system apply -f https://github.com/emberstack/kubernetes-reflector/releases/latest/download/reflector.yaml
      - kubectl create namespace data-plane --dry-run=client -o yaml | kubectl apply -f -
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap
      - cat {{.SOPS_AGE_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.CLUSTER_SECRET_SOPS_FILE}} | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename {{.CLUSTER_SETTINGS_FILE}}
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - { msg: 'Kubeconfig file is missing.', sh: 'test -f {{.KUBECONFIG_FILE}}' }
      - { msg: 'Sops Age key file is missing.', sh: 'test -f {{.SOPS_AGE_FILE}}' }

  apply:
    desc: "Apply a Flux Kustomization resource to the cluster."
    summary: |
      Args:
        path: Path under 'apps' containing the Flux Kustomization resource (ks.yaml) (required).
        ns: Namespace where the Flux Kustomization exists (default: flux-system).
    cmd: |
      flux --kubeconfig {{.KUBECONFIG_FILE}} build ks $(basename {{.path}}) \
        --namespace {{.ns}} \
        --kustomization-file {{.KUBERNETES_DIR}}/apps/{{.path}}/ks.yaml \
        --path {{.KUBERNETES_DIR}}/apps/{{.path}} \
        {{- if contains "not found" .ks }}--dry-run \{{ end }}
      | \
      kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side \
        --field-manager=kustomize-controller -f -
    requires:
      vars: ['path', 'ns']
    vars:
      ns: '{{.ns | default "flux-system"}}'
      ks:
        sh: flux --kubeconfig {{.KUBECONFIG_FILE}} --namespace {{.ns}} get kustomizations $(basename {{.path}}) 2>&1
    preconditions:
      - { msg: 'Kubeconfig file is missing.', sh: 'test -f {{.KUBECONFIG_FILE}}' }
      - { msg: 'Missing Flux Kustomization for app {{.path}}.', sh: 'test -f {{.KUBERNETES_DIR}}/apps/{{.path}}/ks.yaml' }

  reconcile:
    desc: "Force Flux to reconcile with the Git repository."
    cmd: flux --kubeconfig {{.KUBECONFIG_FILE}} reconcile --namespace flux-system kustomization cluster --with-source
    preconditions:
      - { msg: 'Kubeconfig file is missing.', sh: 'test -f {{.KUBECONFIG_FILE}}' }

  github-deploy-key:
    desc: "Create a GitHub deploy key for Flux."
    cmds:
      - kubectl create namespace flux-system --dry-run=client -o yaml | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} -f -
      - sops --decrypt {{.GITHUB_DEPLOY_KEY_FILE}} | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side -f -
    preconditions:
      - { msg: 'Kubeconfig file is missing.', sh: 'test -f {{.KUBECONFIG_FILE}}' }
      - { msg: 'Sops Age key file is missing.', sh: 'test -f {{.AGE_FILE}}' }
      - { msg: 'GitHub deploy key file is missing.', sh: 'test -f {{.GITHUB_DEPLOY_KEY_FILE}}' }
