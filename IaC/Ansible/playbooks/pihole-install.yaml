- name: Pi-hole Installation
  hosts: pihole
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5

  tasks:
    # Create Pi-hole user and group
    - name: Create pihole group
      group:
        name: pihole
        state: present
      tags:
        - pihole

    - name: Create pihole user
      user:
        name: pihole
        group: pihole
        create_home: false
        shell: /usr/sbin/nologin
        state: present
      tags:
        - pihole

    # Create necessary directories
    - name: Create /etc/pihole directory
      file:
        path: /etc/pihole
        state: directory
        owner: pihole
        group: pihole
        mode: '0775'
      tags:
        - pihole

    - name: Create /etc/dnsmasq.d directory
      file:
        path: /etc/dnsmasq.d
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags:
        - pihole

    # Create custom IPv6 reverse config if needed
    - name: Create custom IPv6 reverse config in /etc/dnsmasq.d/02-custom.conf
      copy:
        dest: /etc/dnsmasq.d/02-custom.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          # custom config, add another reverse server for IPv6 addresses (local router box)
          server=/0.0.0.0.0.0.0.0.0.0.d.f.ip6.arpa/{{ router_ipv6_ula_address }}
      register: copy_dnsmasq

    # Manage setupVars.conf file
    - name: Check if /etc/pihole/setupVars.conf already exists
      stat:
        path: /etc/pihole/setupVars.conf
      register: setupvars

    - name: Generate pihole setupVars.conf (overwrite with -e overwrite_setupvars=true)
      copy:
        dest: /etc/pihole/setupVars.conf
        owner: root
        group: root
        mode: '0644'
        backup: true
        content: |
          WEBPASSWORD={{ pihole_admin_password | hash('sha256') | hash('sha256') }}
          PIHOLE_INTERFACE=eth0
          IPV4_ADDRESS={{ ansible_default_ipv4.address }}/24
          IPV6_ADDRESS=fd00::2
          QUERY_LOGGING=true
          INSTALL_WEB_INTERFACE=true
          LIGHTTPD_ENABLED=false
          INSTALL_WEB_SERVER=false
          DNSMASQ_LISTENING=single
          PIHOLE_DNS_1=1.1.1.1
          PIHOLE_DNS_2=1.0.0.1
          PIHOLE_DNS_3=2001:4860:4860:0:0:0:0:8888
          PIHOLE_DNS_4=2001:4860:4860:0:0:0:0:8844
          DNS_FQDN_REQUIRED=true
          DNS_BOGUS_PRIV=true
          DNSSEC=true
          TEMPERATUREUNIT=C
          WEBUIBOXEDLAYOUT=traditional
          API_EXCLUDE_DOMAINS=
          API_EXCLUDE_CLIENTS=
          API_QUERY_LOG_SHOW=all
          API_PRIVACY_MODE=false
          BLOCKING_ENABLED=true
          REV_SERVER=true
          REV_SERVER_CIDR=192.168.x.0/24
          REV_SERVER_TARGET=192.168.x.z
          REV_SERVER_DOMAIN=your.domain
          CACHE_SIZE=10000
      when: (setupvars.stat.exists == false) or ((overwrite_setupvars is defined) and (overwrite_setupvars == "true"))
      register: copy_setupvars

    # Generate adlist file for installation
    - name: Generate adlist file for unattended installation
      lineinfile:
        dest: /etc/pihole/adlists.list
        create: true
        line: '{{ item }}'
      with_items: '{{ pihole_adlists }}'
      register: copy_adlists

    # Download and install Pi-hole
    - name: Install Pi-Hole | Download Pi-hole installation script
      ansible.builtin.get_url:
        url: https://install.pi-hole.net
        dest: /tmp/pihole-install.sh
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 5

    - name: Install Pi-hole in unattended mode
      shell: 'sudo bash /tmp/pihole-install.sh --unattended --disable-install-webserver'
      when: (copy_setupvars.changed) or (copy_dnsmasq.changed) or (copy_adlists.changed)

    # Change Pi-hole password
    - name: Change Pi-hole password
      ansible.builtin.command: pihole -a -p "{{ new_password }}"
      vars:
        new_password: "{{ pihole_admin_password }}"
