name: 'helix-ai'

secrets:
  ###################################################
  #                                                 #
  #              Certificate Authority              #
  #                                                 #
  ###################################################
  ca.crt:
    file: .data/certs/certificate-authority/ca.crt
  ca.key:
    file: .data/certs/certificate-authority/ca.key
  ###################################################
  #                                                 #
  #                    KeyStores                    #
  #                                                 #
  ###################################################


  ###################################################
  #                                                 #
  #                    TrustStores                  #
  #                                                 #
  ###################################################

  ###################################################
  #                                                 #
  #                    Certificates                 #
  #                                                 #
  ###################################################

  ###################################################
  #                                                 #
  #                    Scripts                      #
  #                                                 #
  ###################################################
  run.sh:
    file: ./Ecosystem/Setup/run.sh

#
# Volumes
#
volumes:
  kafka_truststore:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/kafka/certs

  nx_daemon_socket:
    driver: local

  consul_generated:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/consul/generated

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/grafana/prometheus/data

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/grafana/data

  oncall_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/grafana/oncall

  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/consul/vault/data

  vault_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/consul/vault/logs

  mysql-1-data:
  mysql-2-data:
  mysql-3-data:

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/cache/redis/data

  redisinsight_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.data/cache/redisinsight/data

# Ports Used:
# - Database Layer: 3306 (mapped to 3310)
# - Logging and Monitoring Layer: 24224 (TCP/UDP), 9090, 3000, 9200, 9300, 5601 (mapped to 8880)
# - Service Discovery: 8300, 8500, 8600
# - API Gateway: 8080
# - Cache Layer: 6379, 8001
# - Event Bus: 2181 (mapped to 2480), 9092, 9093, 9094
# - Security and Secret Management: 8200
# - CD (Continuous Deployment) layer: (No ports currently defined)
# - Services Layer: 2333 (mapped to 2533)
#
# Ports in order of port number (ascending):
# - 2181 (mapped to 2480), 2333 (mapped to 2533), 3306 (mapped to 3310),
#   5601 (mapped to 8880), 6379, 8001, 8080, 8200, 8300, 8500, 8600,
#   9090, 9092, 9093, 9093, 9094, 9200, 9300, 24224 (TCP/UDP)
#
# Number of ports: 20

services:
  helix-bootstrap: &helix-bootstrap
    extends:
      file: ./Ecosystem/Setup/bootstrap.yaml
      service: helix-bootstrap
    environment:
      KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
    healthcheck:
      test: ['CMD', 'stat', '/certs/success']
      interval: 30s
      timeout: 10s
      retries: 5
  #
  # Database Layer
  #
  proxysql:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: proxysql
    depends_on:
      helix-bootstrap:
        condition: service_healthy
      mysql-master-1:
        condition: service_healthy
      mysql-master-2:
        condition: service_healthy
    ports:
      - '3310:3306'
    healthcheck:
      test: ['CMD', 'mysql', '-h', 'localhost', '-P', '3310', '-u', 'root', '-p${MYSQL_ROOT_PASSWORD}', '-e', 'SELECT 1']
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-master-1:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: mysql-master-1
    depends_on:
      helix-bootstrap:
        condition: service_completed_successfully
    ports:
      - "3306:3306"
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-P', '3306', '-u', 'root', '-p${MYSQL_ROOT_PASSWORD}']
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-master-2:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: mysql-master-2
    depends_on:
      helix-bootstrap:
        condition: service_completed_successfully
    ports:
      - "3307:3306"
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-P', '3306', '-u', 'root', '-p${MYSQL_ROOT_PASSWORD}']
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-master-3:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: mysql-master-3
    depends_on:
      helix-bootstrap:
        condition: service_completed_successfully
    ports:
      - '3308:3306'
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-P', '3306', '-u', 'root', '-p${MYSQL_ROOT_PASSWORD}']
      interval: 10s
      timeout: 5s
      retries: 5

  mysql_exporter_1:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: mysqld_exporter_1
    depends_on:
      mysql-master-1:
        condition: service_healthy
    ports:
      - '9104:9104'

  mysql_exporter_2:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: mysqld_exporter_2
    ports:
      - '9105:9104'
    depends_on:
      mysql-master-2:
        condition: service_healthy

  mysql_exporter_3:
    extends:
      file: ./Ecosystem/Database/mysql.yaml
      service: mysqld_exporter_3
    depends_on:
      mysql-master-3:
        condition: service_healthy
    ports:
      - '9106:9104'

  #
  # Logging and Monitoring Layer
  #
  fluentd: &fluentd # port: 24224
    extends:
      file: ./Ecosystem/Logging-Monitoring/logging-monitoring.layer.yaml
      service: fluentd
    depends_on:
      helix-bootstrap:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    ports:
      - '25224:24224'
      - '25224:24224/udp' # For fluentd to receive logs
      - 9880:9880
    secrets:
      - source: ca.crt
        target: /etc/fluentd/certs/ca.crt
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9880/health_check"]
      interval: 30s
      timeout: 5s
      retries: 3

  # cAdvisor
  cadvisor:
    extends:
      file: ./Ecosystem/Logging-Monitoring/logging-monitoring.layer.yaml
      service: cadvisor
    restart: always
    secrets:
      - source: ca.crt
        target: /etc/cadvisor/certs/ca.crt
    depends_on:
      helix-bootstrap:
        condition: service_completed_successfully

  # Prometheus
  alertmanager:
    extends:
      file: ./Ecosystem/Logging-Monitoring/logging-monitoring.layer.yaml
      service: alertmanager
    depends_on:
      prometheus:
        condition: service_healthy
    secrets:
      - source: ca.crt
        target: /etc/alertmanager/certs/ca.crt
    healthcheck:
      test: ['CMD', 'wget', 'http://localhost:9093']
      interval: 10s
      timeout: 5s
      retries: 12

  prometheus: &prometheus # port: 9090
    extends:
      file: ./Ecosystem/Logging-Monitoring/logging-monitoring.layer.yaml
      service: prometheus
    ports:
      - '9090:9090'
    depends_on:
      helix-bootstrap:
        condition: service_completed_successfully
    secrets:
      - source: ca.crt
        target: /etc/prometheus/certs/ca.crt
    healthcheck:
      test: ['CMD', 'wget', 'http://localhost:9090']
      interval: 10s
      timeout: 5s
      retries: 12

  # Grafana
  grafana: &grafana # port: 3000
    extends:
      file: ./Ecosystem/Logging-Monitoring/logging-monitoring.layer.yaml
      service: grafana
    ports:
      - '3000:3000'
    depends_on:
      prometheus:
        condition: service_healthy
      alertmanager:
        condition: service_healthy
    secrets:
      - source: ca.crt
        target: /etc/grafana/certs/ca.crt
    healthcheck:
      test: ['CMD', 'wget', 'http://localhost:3000']
      interval: 10s
      timeout: 5s
      retries: 12

  # #
  # # Service Discovery
  # #
  # consul-server-1: &consul-server-1 # ports: 8300, 8500, 8600
  #   extends:
  #     file: ./Ecosystem/Service-Discovery/service-discovery.layer.yaml
  #     service: consul-server-1
  #   depends_on:
  #     helix-bootstrap:
  #       condition: service_completed_successfully
  #     vault:
  #       condition: service_healthy
  #   ports:
  #     - '8300:8300'
  #     - '8500:8500'
  #     - '8600:8600'
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:8500/v1/status/leader']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 12

  # consul-server-2: &consul-server-2
  #   extends:
  #     file: ./Ecosystem/Service-Discovery/service-discovery.layer.yaml
  #     service: consul-server-2
  #   depends_on:
  #     helix-bootstrap:
  #       condition: service_completed_successfully
  #     vault:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:8500/v1/status/leader']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 12

  # consul-server-3: &consul-server-3
  #   extends:
  #     file: ./Ecosystem/Service-Discovery/service-discovery.layer.yaml
  #     service: consul-server-3
  #   depends_on:
  #     helix-bootstrap:
  #       condition: service_completed_successfully
  #     vault:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:8500/v1/status/leader']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 12

  # #
  # # Security and Secret management
  # #
  # vault: &vault # port: 8200
  #   extends:
  #     file: ./Ecosystem/Security-Management/security-secret-management.layer.yaml
  #     service: vault
  #   depends_on:
  #     helix-bootstrap:
  #       condition: service_completed_successfully
  #     vault-mysql:
  #       condition: service_healthy
  #     fluentd:
  #       condition: service_healthy
  #   ports:
  #     - '8200:8200'
  #   healthcheck:
  #     test: ['CMD', 'vault', 'status']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # #
  # # Event Bus
  # #
  # init-kafka-topics:
  #   extends:
  #     file: ./Ecosystem/Event-Bus/event-bus.layer.yaml
  #     service: init-kafka-topics
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #     kafka-1:
  #       condition: service_healthy
  #     kafka-2:
  #       condition: service_healthy
  #     kafka-3:
  #       condition: service_healthy

  # kafdrop:
  #   extends:
  #     file: ./Ecosystem/Event-Bus/event-bus.layer.yaml
  #     service: kafdrop
  #   depends_on:
  #     kafka-1:
  #       condition: service_healthy
  #     kafka-2:
  #       condition: service_healthy
  #     kafka-3:
  #       condition: service_healthy
  #   ports:
  #     - '9000:9000'
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # zookeeper:
  #   extends:
  #     file: ./Ecosystem/Event-Bus/event-bus.layer.yaml
  #     service: zookeeper
  #   depends_on:
  #     helix-bootstrap:
  #       condition: service_completed_successfully
  #   healthcheck:
  #     test: ['CMD', 'echo', 'ruok', '|', 'nc', 'localhost', '32181']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # kafka-1:
  #   extends:
  #     file: ./Ecosystem/Event-Bus/event-bus.layer.yaml
  #     service: kafka-1
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # kafka-2:
  #   extends:
  #     file: ./Ecosystem/Event-Bus/event-bus.layer.yaml
  #     service: kafka-2
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # kafka-3:
  #   extends:
  #     file: ./Ecosystem/Event-Bus/event-bus.layer.yaml
  #     service: kafka-3
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9095"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5


  # #
  # # API Gateway
  # #
  # krakend: &krakend # port: 8080
  #   extends:
  #     file: ./Ecosystem/API-Gateway/api-gateway.layer.yaml
  #     service: krakend
  #   ports:
  #     - '8080:8080'
  #   depends_on:
  #     consul-server-1:
  #       condition: service_healthy

  #
  # Cache Layer
  #
  redis: &redis # port: 6379
    extends:
      file: ./Ecosystem/Cache/cache.layer.yaml
      service: redis
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  redis-exporter:
    extends:
      file: ./Ecosystem/Cache/cache.layer.yaml
      service: redis-exporter
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - '9121:9121'

  redisinsight:
    extends:
      file: ./Ecosystem/Cache/cache.layer.yaml
      service: redisinsight
    ports:
      - 5540:5540
    volumes:
      - redisinsight_data:/data
    secrets:
      - source: ca.crt
        target: /etc/redisinsight/certs/ca.crt
    depends_on:
      redis:
        condition: service_healthy

  # #
  # # CD (Continuous Deployment) layer
  # #

  # #
  # # Services
  # #
  # lavalink: &lavalink
  #   extends:
  #     file: Services/lavalink.yaml
  #     service: lavalink
  #   ports:
  #     - '2533:2333'

  discord-alerts:
    extends:
      file: ./Ecosystem/Logging-Monitoring/logging-monitoring.layer.yaml
      service: discord-alerts
    depends_on:
      alertmanager:
        condition: service_healthy
